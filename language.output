Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt
    3      | stmt stmts

    4 stmt: let
    5     | call
    6     | declare
    7     | WHILE '(' exp ')' '{' stmts '}'
    8     | ifstmt

    9 let: IDENT '=' exp ';'

   10 call: IDENT '(' explist ')' ';'
   11     | FUNC '(' explist ')' ';'

   12 declare: DECLARE IDENT '(' symlist ')' '{' stmts '}'

   13 ifstmt: if
   14       | if elselist

   15 elselist: elsiflist
   16         | else
   17         | elsiflist else

   18 elsiflist: elsif
   19          | elsif elsiflist

   20 elsif: ELSIF '(' exp ')' '{' stmts '}'

   21 else: ELSE '{' stmts '}'

   22 if: IF '(' exp ')' '{' stmts '}'

   23 symlist: /* empty */
   24        | IDENT
   25        | IDENT ',' symlist

   26 explist: exp ',' explist
   27        | exp

   28 exp: factor
   29    | factor '+' factor
   30    | factor '-' factor
   31    | factor '*' factor
   32    | factor '/' factor

   33 factor: '(' exp ')'
   34       | NUMBER
   35       | IDENT
   36       | STRING


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 10 11 12 20 22 33
')' (41) 7 10 11 12 20 22 33
'*' (42) 31
'+' (43) 29
',' (44) 25 26
'-' (45) 30
'/' (47) 32
';' (59) 9 10 11
'=' (61) 9
'{' (123) 7 12 20 21 22
'}' (125) 7 12 20 21 22
error (256)
NUMBER (258) 34
IDENT (259) 9 10 12 24 25 35
STRING (260) 36
FUNC (261) 11
WHILE (262) 7
IF (263) 22
ELSE (264) 21
ELSIF (265) 20
DECLARE (266) 12


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
program (24)
    on left: 1, on right: 0
stmts (25)
    on left: 2 3, on right: 1 3 7 12 20 21 22
stmt (26)
    on left: 4 5 6 7 8, on right: 2 3
let (27)
    on left: 9, on right: 4
call (28)
    on left: 10 11, on right: 5
declare (29)
    on left: 12, on right: 6
ifstmt (30)
    on left: 13 14, on right: 8
elselist (31)
    on left: 15 16 17, on right: 14
elsiflist (32)
    on left: 18 19, on right: 15 17 19
elsif (33)
    on left: 20, on right: 18 19
else (34)
    on left: 21, on right: 16 17
if (35)
    on left: 22, on right: 13 14
symlist (36)
    on left: 23 24 25, on right: 12 25
explist (37)
    on left: 26 27, on right: 10 11 26
exp (38)
    on left: 28 29 30 31 32, on right: 7 9 20 22 26 27 33
factor (39)
    on left: 33 34 35 36, on right: 28 29 30 31 32


state 0

    0 $accept: . program $end

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    program  go to state 6
    stmts    go to state 7
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 1

    9 let: IDENT . '=' exp ';'
   10 call: IDENT . '(' explist ')' ';'

    '='  shift, and go to state 14
    '('  shift, and go to state 15


state 2

   11 call: FUNC . '(' explist ')' ';'

    '('  shift, and go to state 16


state 3

    7 stmt: WHILE . '(' exp ')' '{' stmts '}'

    '('  shift, and go to state 17


state 4

   22 if: IF . '(' exp ')' '{' stmts '}'

    '('  shift, and go to state 18


state 5

   12 declare: DECLARE . IDENT '(' symlist ')' '{' stmts '}'

    IDENT  shift, and go to state 19


state 6

    0 $accept: program . $end

    $end  shift, and go to state 20


state 7

    1 program: stmts .

    $default  reduce using rule 1 (program)


state 8

    2 stmts: stmt .
    3      | stmt . stmts

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    $default  reduce using rule 2 (stmts)

    stmts    go to state 21
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 9

    4 stmt: let .

    $default  reduce using rule 4 (stmt)


state 10

    5 stmt: call .

    $default  reduce using rule 5 (stmt)


state 11

    6 stmt: declare .

    $default  reduce using rule 6 (stmt)


state 12

    8 stmt: ifstmt .

    $default  reduce using rule 8 (stmt)


state 13

   13 ifstmt: if .
   14       | if . elselist

    ELSE   shift, and go to state 22
    ELSIF  shift, and go to state 23

    $default  reduce using rule 13 (ifstmt)

    elselist   go to state 24
    elsiflist  go to state 25
    elsif      go to state 26
    else       go to state 27


state 14

    9 let: IDENT '=' . exp ';'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    exp     go to state 32
    factor  go to state 33


state 15

   10 call: IDENT '(' . explist ')' ';'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    explist  go to state 34
    exp      go to state 35
    factor   go to state 33


state 16

   11 call: FUNC '(' . explist ')' ';'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    explist  go to state 36
    exp      go to state 35
    factor   go to state 33


state 17

    7 stmt: WHILE '(' . exp ')' '{' stmts '}'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    exp     go to state 37
    factor  go to state 33


state 18

   22 if: IF '(' . exp ')' '{' stmts '}'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    exp     go to state 38
    factor  go to state 33


state 19

   12 declare: DECLARE IDENT . '(' symlist ')' '{' stmts '}'

    '('  shift, and go to state 39


state 20

    0 $accept: program $end .

    $default  accept


state 21

    3 stmts: stmt stmts .

    $default  reduce using rule 3 (stmts)


state 22

   21 else: ELSE . '{' stmts '}'

    '{'  shift, and go to state 40


state 23

   20 elsif: ELSIF . '(' exp ')' '{' stmts '}'

    '('  shift, and go to state 41


state 24

   14 ifstmt: if elselist .

    $default  reduce using rule 14 (ifstmt)


state 25

   15 elselist: elsiflist .
   17         | elsiflist . else

    ELSE  shift, and go to state 22

    $default  reduce using rule 15 (elselist)

    else  go to state 42


state 26

   18 elsiflist: elsif .
   19          | elsif . elsiflist

    ELSIF  shift, and go to state 23

    $default  reduce using rule 18 (elsiflist)

    elsiflist  go to state 43
    elsif      go to state 26


state 27

   16 elselist: else .

    $default  reduce using rule 16 (elselist)


state 28

   34 factor: NUMBER .

    $default  reduce using rule 34 (factor)


state 29

   35 factor: IDENT .

    $default  reduce using rule 35 (factor)


state 30

   36 factor: STRING .

    $default  reduce using rule 36 (factor)


state 31

   33 factor: '(' . exp ')'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    exp     go to state 44
    factor  go to state 33


state 32

    9 let: IDENT '=' exp . ';'

    ';'  shift, and go to state 45


state 33

   28 exp: factor .
   29    | factor . '+' factor
   30    | factor . '-' factor
   31    | factor . '*' factor
   32    | factor . '/' factor

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 28 (exp)


state 34

   10 call: IDENT '(' explist . ')' ';'

    ')'  shift, and go to state 50


state 35

   26 explist: exp . ',' explist
   27        | exp .

    ','  shift, and go to state 51

    $default  reduce using rule 27 (explist)


state 36

   11 call: FUNC '(' explist . ')' ';'

    ')'  shift, and go to state 52


state 37

    7 stmt: WHILE '(' exp . ')' '{' stmts '}'

    ')'  shift, and go to state 53


state 38

   22 if: IF '(' exp . ')' '{' stmts '}'

    ')'  shift, and go to state 54


state 39

   12 declare: DECLARE IDENT '(' . symlist ')' '{' stmts '}'

    IDENT  shift, and go to state 55

    $default  reduce using rule 23 (symlist)

    symlist  go to state 56


state 40

   21 else: ELSE '{' . stmts '}'

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    stmts    go to state 57
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 41

   20 elsif: ELSIF '(' . exp ')' '{' stmts '}'

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    exp     go to state 58
    factor  go to state 33


state 42

   17 elselist: elsiflist else .

    $default  reduce using rule 17 (elselist)


state 43

   19 elsiflist: elsif elsiflist .

    $default  reduce using rule 19 (elsiflist)


state 44

   33 factor: '(' exp . ')'

    ')'  shift, and go to state 59


state 45

    9 let: IDENT '=' exp ';' .

    $default  reduce using rule 9 (let)


state 46

   29 exp: factor '+' . factor

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    factor  go to state 60


state 47

   30 exp: factor '-' . factor

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    factor  go to state 61


state 48

   31 exp: factor '*' . factor

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    factor  go to state 62


state 49

   32 exp: factor '/' . factor

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    factor  go to state 63


state 50

   10 call: IDENT '(' explist ')' . ';'

    ';'  shift, and go to state 64


state 51

   26 explist: exp ',' . explist

    NUMBER  shift, and go to state 28
    IDENT   shift, and go to state 29
    STRING  shift, and go to state 30
    '('     shift, and go to state 31

    explist  go to state 65
    exp      go to state 35
    factor   go to state 33


state 52

   11 call: FUNC '(' explist ')' . ';'

    ';'  shift, and go to state 66


state 53

    7 stmt: WHILE '(' exp ')' . '{' stmts '}'

    '{'  shift, and go to state 67


state 54

   22 if: IF '(' exp ')' . '{' stmts '}'

    '{'  shift, and go to state 68


state 55

   24 symlist: IDENT .
   25        | IDENT . ',' symlist

    ','  shift, and go to state 69

    $default  reduce using rule 24 (symlist)


state 56

   12 declare: DECLARE IDENT '(' symlist . ')' '{' stmts '}'

    ')'  shift, and go to state 70


state 57

   21 else: ELSE '{' stmts . '}'

    '}'  shift, and go to state 71


state 58

   20 elsif: ELSIF '(' exp . ')' '{' stmts '}'

    ')'  shift, and go to state 72


state 59

   33 factor: '(' exp ')' .

    $default  reduce using rule 33 (factor)


state 60

   29 exp: factor '+' factor .

    $default  reduce using rule 29 (exp)


state 61

   30 exp: factor '-' factor .

    $default  reduce using rule 30 (exp)


state 62

   31 exp: factor '*' factor .

    $default  reduce using rule 31 (exp)


state 63

   32 exp: factor '/' factor .

    $default  reduce using rule 32 (exp)


state 64

   10 call: IDENT '(' explist ')' ';' .

    $default  reduce using rule 10 (call)


state 65

   26 explist: exp ',' explist .

    $default  reduce using rule 26 (explist)


state 66

   11 call: FUNC '(' explist ')' ';' .

    $default  reduce using rule 11 (call)


state 67

    7 stmt: WHILE '(' exp ')' '{' . stmts '}'

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    stmts    go to state 73
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 68

   22 if: IF '(' exp ')' '{' . stmts '}'

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    stmts    go to state 74
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 69

   25 symlist: IDENT ',' . symlist

    IDENT  shift, and go to state 55

    $default  reduce using rule 23 (symlist)

    symlist  go to state 75


state 70

   12 declare: DECLARE IDENT '(' symlist ')' . '{' stmts '}'

    '{'  shift, and go to state 76


state 71

   21 else: ELSE '{' stmts '}' .

    $default  reduce using rule 21 (else)


state 72

   20 elsif: ELSIF '(' exp ')' . '{' stmts '}'

    '{'  shift, and go to state 77


state 73

    7 stmt: WHILE '(' exp ')' '{' stmts . '}'

    '}'  shift, and go to state 78


state 74

   22 if: IF '(' exp ')' '{' stmts . '}'

    '}'  shift, and go to state 79


state 75

   25 symlist: IDENT ',' symlist .

    $default  reduce using rule 25 (symlist)


state 76

   12 declare: DECLARE IDENT '(' symlist ')' '{' . stmts '}'

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    stmts    go to state 80
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 77

   20 elsif: ELSIF '(' exp ')' '{' . stmts '}'

    IDENT    shift, and go to state 1
    FUNC     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    DECLARE  shift, and go to state 5

    stmts    go to state 81
    stmt     go to state 8
    let      go to state 9
    call     go to state 10
    declare  go to state 11
    ifstmt   go to state 12
    if       go to state 13


state 78

    7 stmt: WHILE '(' exp ')' '{' stmts '}' .

    $default  reduce using rule 7 (stmt)


state 79

   22 if: IF '(' exp ')' '{' stmts '}' .

    $default  reduce using rule 22 (if)


state 80

   12 declare: DECLARE IDENT '(' symlist ')' '{' stmts . '}'

    '}'  shift, and go to state 82


state 81

   20 elsif: ELSIF '(' exp ')' '{' stmts . '}'

    '}'  shift, and go to state 83


state 82

   12 declare: DECLARE IDENT '(' symlist ')' '{' stmts '}' .

    $default  reduce using rule 12 (declare)


state 83

   20 elsif: ELSIF '(' exp ')' '{' stmts '}' .

    $default  reduce using rule 20 (elsif)
