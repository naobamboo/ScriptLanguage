Terminals which are not used

   EOL


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt
    3      | stmt stmts

    4 stmt: let
    5     | call
    6     | WHILE '(' exp ')' '{' stmts '}'

    7 let: IDENT '=' exp ';'

    8 call: IDENT '(' explist ')' ';'
    9     | FUNC '(' explist ')' ';'

   10 explist: exp ',' explist
   11        | exp

   12 exp: factor
   13    | factor '+' factor
   14    | factor '-' factor
   15    | factor '*' factor
   16    | factor '/' factor

   17 factor: '(' exp ')'
   18       | NUMBER
   19       | IDENT
   20       | STRING


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 8 9 17
')' (41) 6 8 9 17
'*' (42) 15
'+' (43) 13
',' (44) 10
'-' (45) 14
'/' (47) 16
';' (59) 7 8 9
'=' (61) 7
'{' (123) 6
'}' (125) 6
error (256)
NUMBER (258) 18
IDENT (259) 7 8 19
STRING (260) 20
FUNC (261) 9
WHILE (262) 6
EOL (263)


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
program (21)
    on left: 1, on right: 0
stmts (22)
    on left: 2 3, on right: 1 3 6
stmt (23)
    on left: 4 5 6, on right: 2 3
let (24)
    on left: 7, on right: 4
call (25)
    on left: 8 9, on right: 5
explist (26)
    on left: 10 11, on right: 8 9 10
exp (27)
    on left: 12 13 14 15 16, on right: 6 7 10 11 17
factor (28)
    on left: 17 18 19 20, on right: 12 13 14 15 16


state 0

    0 $accept: . program $end

    IDENT  shift, and go to state 1
    FUNC   shift, and go to state 2
    WHILE  shift, and go to state 3

    program  go to state 4
    stmts    go to state 5
    stmt     go to state 6
    let      go to state 7
    call     go to state 8


state 1

    7 let: IDENT . '=' exp ';'
    8 call: IDENT . '(' explist ')' ';'

    '='  shift, and go to state 9
    '('  shift, and go to state 10


state 2

    9 call: FUNC . '(' explist ')' ';'

    '('  shift, and go to state 11


state 3

    6 stmt: WHILE . '(' exp ')' '{' stmts '}'

    '('  shift, and go to state 12


state 4

    0 $accept: program . $end

    $end  shift, and go to state 13


state 5

    1 program: stmts .

    $default  reduce using rule 1 (program)


state 6

    2 stmts: stmt .
    3      | stmt . stmts

    IDENT  shift, and go to state 1
    FUNC   shift, and go to state 2
    WHILE  shift, and go to state 3

    $default  reduce using rule 2 (stmts)

    stmts  go to state 14
    stmt   go to state 6
    let    go to state 7
    call   go to state 8


state 7

    4 stmt: let .

    $default  reduce using rule 4 (stmt)


state 8

    5 stmt: call .

    $default  reduce using rule 5 (stmt)


state 9

    7 let: IDENT '=' . exp ';'

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    exp     go to state 19
    factor  go to state 20


state 10

    8 call: IDENT '(' . explist ')' ';'

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    explist  go to state 21
    exp      go to state 22
    factor   go to state 20


state 11

    9 call: FUNC '(' . explist ')' ';'

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    explist  go to state 23
    exp      go to state 22
    factor   go to state 20


state 12

    6 stmt: WHILE '(' . exp ')' '{' stmts '}'

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    exp     go to state 24
    factor  go to state 20


state 13

    0 $accept: program $end .

    $default  accept


state 14

    3 stmts: stmt stmts .

    $default  reduce using rule 3 (stmts)


state 15

   18 factor: NUMBER .

    $default  reduce using rule 18 (factor)


state 16

   19 factor: IDENT .

    $default  reduce using rule 19 (factor)


state 17

   20 factor: STRING .

    $default  reduce using rule 20 (factor)


state 18

   17 factor: '(' . exp ')'

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    exp     go to state 25
    factor  go to state 20


state 19

    7 let: IDENT '=' exp . ';'

    ';'  shift, and go to state 26


state 20

   12 exp: factor .
   13    | factor . '+' factor
   14    | factor . '-' factor
   15    | factor . '*' factor
   16    | factor . '/' factor

    '+'  shift, and go to state 27
    '-'  shift, and go to state 28
    '*'  shift, and go to state 29
    '/'  shift, and go to state 30

    $default  reduce using rule 12 (exp)


state 21

    8 call: IDENT '(' explist . ')' ';'

    ')'  shift, and go to state 31


state 22

   10 explist: exp . ',' explist
   11        | exp .

    ','  shift, and go to state 32

    $default  reduce using rule 11 (explist)


state 23

    9 call: FUNC '(' explist . ')' ';'

    ')'  shift, and go to state 33


state 24

    6 stmt: WHILE '(' exp . ')' '{' stmts '}'

    ')'  shift, and go to state 34


state 25

   17 factor: '(' exp . ')'

    ')'  shift, and go to state 35


state 26

    7 let: IDENT '=' exp ';' .

    $default  reduce using rule 7 (let)


state 27

   13 exp: factor '+' . factor

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    factor  go to state 36


state 28

   14 exp: factor '-' . factor

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    factor  go to state 37


state 29

   15 exp: factor '*' . factor

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    factor  go to state 38


state 30

   16 exp: factor '/' . factor

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    factor  go to state 39


state 31

    8 call: IDENT '(' explist ')' . ';'

    ';'  shift, and go to state 40


state 32

   10 explist: exp ',' . explist

    NUMBER  shift, and go to state 15
    IDENT   shift, and go to state 16
    STRING  shift, and go to state 17
    '('     shift, and go to state 18

    explist  go to state 41
    exp      go to state 22
    factor   go to state 20


state 33

    9 call: FUNC '(' explist ')' . ';'

    ';'  shift, and go to state 42


state 34

    6 stmt: WHILE '(' exp ')' . '{' stmts '}'

    '{'  shift, and go to state 43


state 35

   17 factor: '(' exp ')' .

    $default  reduce using rule 17 (factor)


state 36

   13 exp: factor '+' factor .

    $default  reduce using rule 13 (exp)


state 37

   14 exp: factor '-' factor .

    $default  reduce using rule 14 (exp)


state 38

   15 exp: factor '*' factor .

    $default  reduce using rule 15 (exp)


state 39

   16 exp: factor '/' factor .

    $default  reduce using rule 16 (exp)


state 40

    8 call: IDENT '(' explist ')' ';' .

    $default  reduce using rule 8 (call)


state 41

   10 explist: exp ',' explist .

    $default  reduce using rule 10 (explist)


state 42

    9 call: FUNC '(' explist ')' ';' .

    $default  reduce using rule 9 (call)


state 43

    6 stmt: WHILE '(' exp ')' '{' . stmts '}'

    IDENT  shift, and go to state 1
    FUNC   shift, and go to state 2
    WHILE  shift, and go to state 3

    stmts  go to state 44
    stmt   go to state 6
    let    go to state 7
    call   go to state 8


state 44

    6 stmt: WHILE '(' exp ')' '{' stmts . '}'

    '}'  shift, and go to state 45


state 45

    6 stmt: WHILE '(' exp ')' '{' stmts '}' .

    $default  reduce using rule 6 (stmt)
